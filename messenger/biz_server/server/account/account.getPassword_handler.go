// Copyright (c) 2018-present,  NebulaChat Studio (https://nebula.chat).
//  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Author: Benqi (wubenqi@gmail.com)
// Updated by Hypnosis (hypnosis@mail.i2p)

package account

import (
	"github.com/golang/glog"
	"github.com/nebula-chat/chatengine/pkg/grpc_util"
	"github.com/nebula-chat/chatengine/pkg/logger"
	"github.com/nebula-chat/chatengine/mtproto"
	"golang.org/x/net/context"
)

// TODO(@benqi): hard code
var (
	newAlgoSalt1 = []byte{0x51, 0x20, 0xBA, 0xD7, 0xD2, 0x1B, 0xE2, 0x5B}
	newAlgoSalt2 = []byte{0x5E, 0x19, 0x37, 0xE6, 0x2B, 0xD2, 0xD1, 0xAC, 0x8E, 0x59, 0xEF, 0x72, 0x51, 0xE3, 0xD9, 0x5E}
	newAlgoG = int32(2)
	newAlgoP = []byte{
		0x00, 0xff, 0xc8, 0xab, 0x23, 0xb8, 0x57, 0xee, 0x3c, 0x43, 0xd8, 0x9b, 0xe1, 0x3d, 0x1e,
		0x80, 0x25, 0xb0, 0xfb, 0x85, 0x6a, 0xb5, 0x42, 0xb3, 0x9f, 0xc4, 0x48, 0xfd, 0x89, 0x8d,
		0x9d, 0xc7, 0x5a, 0xf0, 0x7b, 0x51, 0xc9, 0x55, 0xb5, 0x26, 0x27, 0xdb, 0xd2, 0x57, 0x32,
		0xa0, 0xe7, 0x7c, 0xc4, 0x72, 0xf3, 0x28, 0x41, 0xa4, 0x34, 0x17, 0xe8, 0xa3, 0xba, 0xcd,
		0x04, 0xae, 0x1f, 0x8c, 0xb4, 0xf4, 0xc8, 0xc5, 0x26, 0x58, 0x43, 0x3c, 0x7c, 0xf6, 0x6c,
		0x2e, 0x6f, 0xc2, 0x77, 0xe7, 0x00, 0x11, 0xbb, 0x09, 0xd1, 0xf8, 0xc1, 0x81, 0x98, 0x16,
		0xc5, 0xf2, 0x54, 0xe2, 0xc0, 0xee, 0x24, 0x89, 0xd5, 0x76, 0xe2, 0xd1, 0x7a, 0x73, 0x5f,
		0x6c, 0xd8, 0xff, 0xf2, 0xdd, 0x88, 0x28, 0xcb, 0xad, 0x90, 0xe1, 0xe5, 0x6e, 0xda, 0xce,
		0xb7, 0x57, 0x73, 0x23, 0x68, 0x78, 0xfe, 0x59, 0xd6, 0x3a, 0xd9, 0x94, 0x23, 0xa1, 0xe7,
		0x63, 0xd9, 0xb6, 0x6b, 0x88, 0x98, 0x71, 0x3c, 0xf8, 0x69, 0xb8, 0x4c, 0xbc, 0xc0, 0x36,
		0x93, 0x28, 0xe4, 0x7a, 0xff, 0x07, 0x58, 0x2b, 0xa6, 0x41, 0xa4, 0x7f, 0xd0, 0x20, 0x16,
		0xb8, 0x09, 0x6e, 0x0c, 0x54, 0x11, 0xfb, 0x2c, 0xb9, 0x10, 0x52, 0x1a, 0x0a, 0xab, 0xad,
		0xcb, 0xa9, 0x78, 0xb9, 0x44, 0x20, 0xef, 0x54, 0x1b, 0x5a, 0x07, 0xf8, 0x81, 0x29, 0x24,
		0x29, 0x9f, 0xb3, 0xc9, 0x89, 0x0d, 0x9b, 0xfc, 0x74, 0x52, 0x58, 0x34, 0x2c, 0xb4, 0x0a,
		0x9b, 0x01, 0xd5, 0x68, 0x46, 0x10, 0x5e, 0xf6, 0x63, 0x46, 0x22, 0xf4, 0x29, 0xf0, 0xcb,
		0x1a, 0xf3, 0xb7, 0x0e, 0x3d, 0x85, 0xca, 0xd6, 0xfc, 0x2a, 0xed, 0xc0, 0x03, 0x3b, 0x12,
		0x60, 0xfa, 0x43, 0xb6, 0xe1, 0x15, 0x97, 0xa9, 0x78, 0x9f, 0x58, 0xf7, 0x68, 0xc7, 0x61,
		0x9c, 0xe3}
	newSecureAlgoSalt = []byte{0x7D, 0x04, 0xB3, 0x4B, 0x94, 0x82, 0x8C, 0x3D}
)

// account.password#ad2641f8 flags:# has_recovery:flags.0?true has_secure_values:flags.1?true has_password:flags.2?true current_algo:flags.2?PasswordKdfAlgo srp_B:flags.2?bytes srp_id:flags.2?long hint:flags.3?string email_unconfirmed_pattern:flags.4?string new_algo:PasswordKdfAlgo new_secure_algo:SecurePasswordKdfAlgo secure_random:bytes = account.Password;
// account.getPassword#548a30f5 = account.Password;
func (s *AccountServiceImpl) AccountGetPassword(ctx context.Context, request *mtproto.TLAccountGetPassword) (*mtproto.Account_Password, error) {
	md := grpc_util.RpcMetadataFromIncoming(ctx)
	glog.Infof("account.getPassword#548a30f5 - metadata: %s, request: %s", logger.JsonDebugData(md), logger.JsonDebugData(request))

	newAlgo := &mtproto.TLPasswordKdfAlgoModPow{Data2: &mtproto.PasswordKdfAlgo_Data{
		Salt1: newAlgoSalt1,
		Salt2: newAlgoSalt2,
		G:     newAlgoG,
		P:     newAlgoP,
	}}
	newSecureAlgo := &mtproto.TLSecurePasswordKdfAlgoPBKDF2{Data2: &mtproto.SecurePasswordKdfAlgo_Data{
		Salt: newSecureAlgoSalt,
	}}
	password := &mtproto.TLAccountPassword{Data2: &mtproto.Account_Password_Data{
		NewAlgo:       newAlgo.To_PasswordKdfAlgo(),
		NewSecureAlgo: newSecureAlgo.To_SecurePasswordKdfAlgo(),
	}}

	glog.Infof("account.getPassword#548a30f5 - reply: %s", logger.JsonDebugData(password))
	return password.To_Account_Password(), nil
}
